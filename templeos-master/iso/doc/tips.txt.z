$WW,1$$FG,5$$TX+CX,"Tips"$$FG$

* Turn-off or reboot ($FG,2$<CTRL-ALT-DEL>$FG$) at any time, except during disk writes.  Writes are not cached. 

* 64-bit values are most efficient for the compiler.

* See $MA-X+PU,"Key Map",LM="KeyMap;View;\n"$ for a list of defined keys.  Define your own keys in $LK,"MyPutKey",A="MN:MyPutKey"$().  See $LK,"Keyboard Devices",A="HI:Keyboard Devices/System"$.

* $FG,2$<ALT-m>$FG$ maximizes a window.  $FG,2$<ALT-SHIFT-w>$FG$ closes AutoComplete.  $FG,2$<ALT-w>$FG$ brings back AutoComplete.  $FG,2$<ALT-v>$FG$ vertically tiles windows.  $FG,2$<ALT-h>$FG$ horizontally tiles windows.  The $FG,2$ALT$FG$ keys are defined in $LK,"::/Accts/Adam3cKeyPlugIns.CPP"$.  You can customize them.

* If you make changes to TempleOS files in your $FG,2$HOME$FG$ directory, generally you reboot to make them take effect.  (You don't compile anything.)  You should have two TempleOS partitions on your hard drive because a syntax error in a start-up file will make the partition unbootable.  Boot to the second partition or boot to a standard TempleOS CD-ROM and use $LK,"Mount",A="MN:Mount"$() to mount your hard drive.

* I copy my files to a mirrored identical partition, periodically with $LK,"CopyTree",A="MN:CopyTree"$() commands in scripts.  I do merge commands with a menu entry like this:
$FG,5$Merge(\"D:/*\",\"E:/*\",\"+r+d\");$FG$ to check my changes.

* $FG,2$<CTRL-m>$FG$ at the cmd line to access your PersonalMenu.  Place macros there with $FG,2$<CTRL-l>$FG$, or icon-like sprites with $FG,2$<CTRL-r>$FG$.  Use the $FG,2$Pop-Up$FG$ option on macros to $LK,"Spawn",A="MN:Spawn"$() a task to run a file.  It dies when it is finished.  This returns mem to the system.  Be sure to press $FG,2$<CTRL-s>$FG$ to save your macro/menu area after making changes.

* You can use $FG,2$ans$FG$ in cmd line expressions.  It holds the result the last cmd line operation.  You can use the cmd prompt as a calculator by just entering expressions like $FG,2$1+2*3;$FG$.  $FG,2$F64$FG$ results can be accessed with $FG,2$ansf$FG$.

* Use the PullDown menu at the top of the screen to learn commands, or for finding the keyboard controls to games.

* You can adjust the mouse movement rate by setting global vars in your start-up file.  See $LK,"mouse scale",A="FF:HOME/Adam3aLocalize.CPP,mouse.scale"$.

* You can set your local time zone by setting the $LK,"local_time_offset",A="MN:local_time_offset"$ global var in a start-up file.  It's units are $LK,"CDATE_FREQ",A="MN:CDATE_FREQ"$.  See $LK,"local time",A="FF:HOME/Adam3aLocalize.CPP,local_time"$.

* $FG,2$<CTRL-SHIFT-L>$FG$ in the editor to reindent a $LK,"HolyC",A="FI:::/Doc/HolyC.TXT"$ function or renumber an asm routine's local labels.

* You can use $FG,2$filter_lines$FG$ in the editor text search form ($FG,2$<CTRL-f>$FG$) to temporarily display just lines near each match.  A value of $FG,2$filter lines$FG$ set to $FG,2$5$FG$ will display lines within 5 lines of matches.  Then, you can do another find to a different string and achieve a $FG,2$AND$FG$ search.  When finished, press $FG,2$<ESC>$FG$.
 
* You can recompile and reinstall the kernel with $LK,"MakeOSPrtBootInstall",A="MN:MakeOSPrtBootInstall"$().  You'll probably want to make a function for recompiling that uses the $LK,"Auto",A="MN:Auto"$() function to answer the cfg questions.  See my technique $LK,"Cfg Strs",A="FL:::/Demo/AcctExample/TSAdam.CPP,1"$ $LK,"Update Funs",A="FL:::/Demo/AcctExample/TSDistro.CPP,1"$.

* $LK,"Scale2Mem",A="MN:Scale2Mem"$(min,max,limit=2*1024*1024*1024) can be used for cfg questions when recompiling.  The $LK,"MakeOSPrtBootInstall",A="MN:MakeOSPrtBootInstall"$() cfg prompts accept expressions, not just numbers.  The dft disk cache is $FG,2$Scale2Mem(0x80000,0x8000000)$FG$.

* You can permanently disable $FG,2$AutoComplete$FG$ commenting-out $LK,"ACInit",A="FF:HOME/Adam3eSys.CPP,ACInit"$() in $LK,"HOME/Adam3eSys.CPP",A="FF:HOME/Adam3eSys.CPP,ACInit"$.

* Boolean expressions $BK,1$not$BK,0$ in $FG,2$if$FG$ statements don't have short circuit logic and are compiled inefficiently.

* You can use $LK,"progress1",A="MN:progress1"$-$LK,"progress4",A="MN:progress4"$ in your programs for whatever you like.  They're just global vars that are shown on the wallpaper.  The original intent was to indicate how far along operations were.  There's no coordination, so different apps might interfere.  I use them most for debugging--just values easily viewed.  See $LK,"::/Demo/Progress.CPP"$.

* Use $LK,"DocMax",A="MN:DocMax"$() to adjust the size of the cmd line buf.  It counts $LK,"CDoc",A="MN:CDoc"$ entries, not lines.

* Many data structures have a $FG,2$user_data$FG$ member.  Those are available for you to store a data item, for convenience.  $LK,"CTask",A="MN:CTask"$, $LK,"CDocEntry",A="MN:CDocEntry"$ and $LK,"CDirEntry",A="MN:CDirEntry"$ have them.  You shouldn't encounter conflicts with TempleOS using them.

* If, for some strange reason, you wanted to reduce mem usage, make a smaller disk cache when you recompile the kernel; disabling $FG,2$AutoComplete$FG$; Specify smaller stk sizes when doing $LK,"Spawn",A="MN:Spawn"$(), chang $LK,"DFT_STK",A="MN:DFT_STK"$, and using $LK,"DocMax",A="MN:DocMax"$() to reduce the cmd line buffer size.

* Filenames ending in "$FG,2$.Z$FG$" will be automatically compressed and uncompressed when read or written.  The compression method is not supported by other operating systems.  You can store files uncompressed by $LK,"Move",A="MN:Move"$()ing them to a filename not ending in "$FG,2$.Z$FG$".  See $LK,"::/Doc/TSZ.TXT"$ if you want to uncompress while in $FG,2$Linux$FG$.

* $LK,"Merge",A="MN:Merge"$() can be used to see what's changed.  The $FG,2$+d$FG$ flag will show differences of files which have changed and allow you to merge code.  (The $FG,2$+r$FG$ flag will recurse.)

* There is a utility $LK,"LinkChk",A="MN:LinkChk"$() which will check for broken links in documentation.

* You can use $LK,"OptOn",A="MN:OptOn"$($LK,"OPTf_WARN_PAREN",A="MN:OPTf_WARN_PAREN"$) to find unnecessary parentheses in code.

* You can use $LK,"OptOn",A="MN:OptOn"$($LK,"OPTf_WARN_DUP_TYPES",A="MN:OPTf_WARN_DUP_TYPES"$) to find unnecessary local var type statements.

* $LK,"OptEqu",A="MN:OptEqu"$($LK,"OPTf_ECHO",A="MN:OPTf_ECHO"$,ON) can be placed in $LK,"Adam1.CPP",A="FI:::/Kernel/Adam1.CPP"$ to echo start-up scripts.

* Use $LK,"Plain",A="MN:Plain"$() to edit a plain text file.  You'll need this if your file has $FG,2$$$$FG$'s.  Use the $LK,"::/Misc/ToDolDoc.CPP"$ utility to convert plain text to DolDoc's.

* Use $LK,"Silent",A="MN:Silent"$() to disable screen text output.

* Grab-scroll any window at any time with $FG,2${CTRL-LEFT-MOUSE-DRAG}$FG$.  Null grab-scrolling with $FG,2${CTRL-RIGHT-MOUSE}$FG$.

* Use $FG,2$<CTRL-ALT-z>$FG$ to zoom-in and $FG,2$<CTRL-ALT-SHIFT-Z>$FG$ to zoom-out.  You can scroll by moving to the edge of the window.  Set $LK,"gr.continuous_scroll",A="MN:CGrGlbls"$ to $FG,2$TRUE$FG$ if you want. 

* Use $FG,2$<CTRL-ALT-g>$FG$ and $FG,2$<CTRL-ALT-SHIFT-G>$FG$ to display a grid on the screen.

* Use $FG,2$<CTRL-ALT-a>$FG$ to enter an extended ASCII char.

* Use $FG,2$<CTRL-ALT-s>$FG$ will capture the screen as a sprite on the clipboard.  You can save the cmd line doc as text with $FG,2$<CTRL-a>$FG$.

* You can save a sprite as a $FG,2$.BMP$FG$ file in $FG,2$<CTRL-r>$FG$ on the Sprite BitMap Menu.

* You can EyeDropper colors in the $FG,2$<CTRL-r>$FG$ sprite editor by pressing $FG,2$'c'$FG$.

* There are handy functions--$FG,2$F(),R(),FD()$FG$ and $FG,2$RD()$FG$ which are defined in $LK,"HOME/Adam3dWrappers.CPP"$.  You're encouraged to change them, since they're in acct files.  They will perform find-and-replace operations accross multiple files.  The $FG,2$+l$FG$ flag is particularly useful since it limits to whole labels.  The $FG,2$+lb$FG$ and $FG,2$+la$FG$ flags limit to whole labels just before or after.  You are encouraged to add or modify handy wrapper functions to make cmd line operations easier.

* When using $LK,"Grep",A="MN:Grep"$() while modifying code, work from the bottom-up so that line numbers are correct.  If you work top-down, then inserting or deleting lines causes the lower file links will be incorrect.

* You can save files after making changes, anytime you are within the editor, like when viewing help/macro files.  $FG,2$<CTRL-a>$FG$ saves as, $FG,2$<CTRL-s>$FG$ saves with the same name in the scrolling title bar.  Hitting $FG,2$<ESC>$FG$ will exit and save.  ($FG,2$<SHIFT-ESC>$FG$ will abort).  You can save the cmd line window to a file, too, since you're actually in the editor when you're at the cmd line.

* When using $FG,2$<CTRL-l>$FG$ to insert links in documents, you can usually leave the $FG,2$Tag Text$FG$ blank and it will be filled-in automatically based on other entries.

* There is a feature of the precompiler that allows code to be executed in the middle of compilation and data inserted into the compilation stream.  Click here for an example: $LK,"#exe {",A="FF:::/Kernel/KEnd.CPP,#exe {"$.

* If you output to the cmd line and wish to allow users to scroll around and view data, you can use $LK,"View",A="MN:View"$().

* Use $LK,"View",A="MN:View"$() in Pop-up macros to linger until the user presses $FG,2$<ESC>$FG$ or $FG,2$<SHIFT-ESC>$FG$.

* You can access the word under the cursor at $LK,"ac.cur_word",A="MN:CAutoCompleteGlbls"$, but you should probably turn-off preemption or interrupts momentarily to copy it.

* You can reactivate $FG,2$AutoComplete$FG$ after closing it by pressing $FG,2$<CTRL-Fun Key>$FG$ or $FG,2$<ALT-w>$FG$ if you have it defined.

* $LK,"Preempt",A="MN:Preempt"$() is used to keep a task from being interrupted and swapped-out.  It has a similar effect to turning-off interrupts.  Each task has it's own preemption ctrl.  A task with preemption turned-off can voluntarily $LK,"Yield",A="MN:Yield"$() with preemption off.

* You can set a color for different drives with $LK,"SetDrvTextAttr",A="MN:SetDrvTextAttr"$().  Place calls to this in $LK,"HOME/Adam3aLocalize.CPP"$.

* $FG,2$<CTRL-SHIFT-T>$FG$ to toggle to/from plain text just the $LK,"CDoc",A="MN:CDoc"$ cmd under the cursor.  See $LK,"::/Demo/DolDoc/TextDemo.CPP"$.
 
* If you toggle to plain text when you are working with graphics in a document, you can add duplicate entries for sprites by entering a $FG,2$$$SP...$$$FG$ cmd with the same num.

* If you toggle to plain text when working with graphics, you can add a str to the $FG,2$$$SP...$$$FG$ entry to keep track of it.  Try $FG,2$$$SP,"<2>",BI=2$$$FG$ where '2' is the sprite num.

* I use spaces-to-tab operations on all my src files to keep them small.  You have to be careful, though, because spaces in strings will be converted.  I use $FG,2$<SHIFT-SPACE>$FG$ ' ' in such cases.  See $LK,"S2T",A="MN:S2T"$() for spaces-to-tabs.

* You can edit an existing sprite by putting the cursor on it and pressing $FG,2$<CTRL-r>$FG$.

* When editing a sprite, you can cut and paste the elements in the sidebar text list window.

* I recommend keeping CSprite in vect format until you are done creating them, so you can edit the ctrl points.  Then, convert them to bitmaps, so the flood fills work well.  If you are doing interpolation, however, they must be vect.

* $LK,"GrFloodFill",A="MN:GrFloodFill"$() is slow.  $LK,"GrRect",A="MN:GrRect"$() is fast.

* You can customize the $FG,2$wallpaper$FG$.  See $LK,"::/Demo/Graphics/WallPaperFish.CPP"$.

* Your RAM disks will not be reformated when you reboot if the memory location has not changed and it finds the disk intacted.

* $FG,2$try{} catch{}$FG$ in a function will cause all vars to be non-reg.

* Using a sub-int array, $FG,2$i.u8[3]$FG$, for example, will force a local var to non-reg.

* You can delete the $FG,4$HOME/Registry.CPP.Z$FG$ file.  The policy is that deleting it will restore defaults.  It is a text doc, if you want to edit it.  Be careful of tree indentations.

* Study $LK,"::/Adam/Utils/MemRep.CPP"$ and $LK,"WallPaper",A="MN:WallPaper"$() to learn how the system resources are put together.

* The editor's select-text mechanism allows for disjoint portions of selected text.  This is a feature, not a bug -- you can cut-and-paste disjoint text.

* $LK,"cnts.time_stamp_freq",A="MN:CCntsGlbls"$ is continuously calibrated.  Be careful because expressions might decrease.  Take a snap-shot, like this: $FG,2$timeout=$LK,"GetTSC",A="MN:GetTSC"$+$LK,"cnts.time_stamp_freq",A="MN:CCntsGlbls"$ x seconds;$FG$ and compare against $LK,"GetTSC",A="MN:GetTSC"$().  I recommend just using $LK,"tS",A="MN:tS"$ or $LK,"cnts.jiffies",A="MN:CCntsGlbls"$.

* Use $LK,"HeapLog",A="MN:HeapLog"$() and $LK,"HeapLogRep",A="MN:HeapLogRep"$() to find leaks.  Don't be confused by $LK,"CDoc",A="MN:CDoc"$ allocations.  Those are generated when text is written to the cmd line buffer.

* For advanced heap debugging, play with $LK,"_CFG_HEAP_DBG",A="MN:_CFG_HEAP_DBG"$.  You're on your own.

* You can use $LK,"Type",A="MN:Type"$() to display $FG,2$.BMP$FG$ or $FG,2$.GRA$FG$ files.

* Use $LK,"Man",A="MN:Man"$() to jump to short sym name src code.

* Use $LK,"Fix",A="MN:Fix"$() to edit and fix the last compiler err.

* You can use $FG,2$<CTRL-SHIFT-L>$FG$ to do a check for compile errors.

* You can use $LK,"DocOpt",A="MN:DocOpt"$() to optimize links. (Mostly just removes .Z)

* $LK,"ZipRep",A="MN:ZipRep"$() can highlight src files with lots of redundancy.

* With $FG,2$sub_switch_start$FG$/$FG,2$sub_switch_end$FG$, common trailing code is fast.  Common leading code is slow.$FG$

* The first line of the $MA-X+PU,"Psalmody",LM="#include \"::/Apps/Psalmody/Run\"\n"$ $LK,"HolyC",A="FI:::/Doc/HolyC.TXT"$ song files is a comment with a category recognized by $LK,"JukeBox",A="FF:::/Apps/Psalmody/JukeBox.CPP,JukeBox"$().  The categories are $FG,2$"no nothing"$FG$, $FG,2$"has words"$FG$, $FG,2$"has graphics"$FG$, or $FG,2$"special"$FG$.  The third character in the song comment is a digit rating number, shown in $LK,"JukeBox",A="FF:::/Apps/Psalmody/JukeBox.CPP,JukeBox"$().  You can set the song rating in $LK,"JukeBox",A="FF:::/Apps/Psalmody/JukeBox.CPP,JukeBox"$() by pressing $FG,2$0$FG$-$FG,2$9$FG$.  You can press $FG,2$<DELETE>$FG$ to delete songs.

$FG,8$
* "Linux" is probably a trademark owned by Linus Torvalds.
$FG$